substitutions:
  # Default name
  name: "geyserwise-tse"
  # Default friendly name   
  friendly_name: "Geyserwise TSE ESP Home"
  # Allows ESP device to be automatically linked to an 'Area' in Home Assistant. Typically used for areas such as 'Lounge Room', 'Kitchen' etc  
  room: ""
  # Appends the mac Address to the device name, set to "false" to disable
  add_mac_suffix: "true"
  # Description as appears in ESPHome & top of webserver page
  device_description: "Geyserwise TSE ESP Home"
  # Project Name
  project_name: "SmartPad.geyserwise-tse"
  # Projection version denotes the release version of the yaml file, allowing checking of deployed vs latest version
  project_version: "v1.0.0"
  # Set the update interval for sensors
  sensor_update_interval: 10s
  # Define a domain for this device to use. i.e. iot.home.lan (so device will appear as smartpad-em32-smart-plug.local in DNS/DHCP logs)
  dns_domain: ".local"
  # Set timezone of the smart plug. Useful if the plug is in a location different to the HA server. Can be entered in unix Country/Area format (i.e. "Africa/Johannesburg")
  timezone: ""
  # Set the duration between the sntp service polling ntp.org servers for an update
  sntp_update_interval: 6h
  # Network time servers for your region, enter from lowest to highest priority. To use local servers update as per zones or countries at: https://www.ntppool.org/zone/@
  sntp_server_1: "0.pool.ntp.org"
  sntp_server_2: "1.pool.ntp.org"
  sntp_server_3: "2.pool.ntp.org"  
  # Enables faster network connections, with last connected SSID being connected to and no full scan for SSID being undertaken
  wifi_fast_connect: "false"
  # Define logging level: NONE, ERROR, WARN, INFO, DEBUG (Default), VERBOSE, VERY_VERBOSE
  log_level: "INFO"
  # Enable or disable the use of IPv6 networking on the device
  ipv6_enable: "false"
  # Specify Web Server Versions
  web_server_version: "2"
  # Default MQTT broker IP (can be overridden via web interface)
  mqtt_broker_ip: "192.168.1.100"
  # Default MQTT username (can be overridden via web interface)
  mqtt_username: "mqtt_user"
  # Default MQTT password (can be overridden via web interface)
  mqtt_password: ""

########################## End of Substitutions #########################

# Core Configuration
esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  comment: "${device_description}"
  area: "${room}"  
  name_add_mac_suffix: "${add_mac_suffix}"
  min_version: 2024.6.0
  project:
    name: "${project_name}"
    version: "${project_version}"

# Board Configuration
esp8266:
  board: esp01_1m

# Disable serial logging
logger:
  baud_rate: 0

dashboard_import:
  package_import_url: github://Smartpadza/Device_Configs/geyserwise-tse-mqtt.yaml
  import_full_config: false

# Prevent rapid changes to a component from being quickly written to the flash and wearing it out
preferences:
  flash_write_interval: 5min

# Enable Home Assistant API
api:

# Enable OTA Updates
ota:
  - platform: esphome

# Allow MDNS to be disabled
mdns:
  disabled: false

# Enable Web Server
web_server:
  port: 80
  version: ${web_server_version}

# MQTT Configuration
mqtt:
  broker: id(mqtt_broker_ip_global)
  username: id(mqtt_username_global)
  password: id(mqtt_password_global)
  id: mqtt_client
  on_disconnect:
    - logger.log: "Disconnected from MQTT broker"

# Global variables to store MQTT configuration
globals:
  - id: mqtt_broker_ip_global
    type: std::string
    restore_value: true
    initial_value: "${mqtt_broker_ip}"
  - id: mqtt_username_global
    type: std::string
    restore_value: true
    initial_value: "${mqtt_username}"
  - id: mqtt_password_global
    type: std::string
    restore_value: true
    initial_value: "${mqtt_password}"

network:
  enable_ipv6: ${ipv6_enable}

# WiFi Configuration
wifi:
  ap: {}
  fast_connect: "${wifi_fast_connect}"
  domain: "${dns_domain}"

# Enable Captive Portal Fallback
captive_portal:

uart:
  rx_pin: GPIO03
  tx_pin: GPIO01
  baud_rate: 9600

tuya:

sensor:
  - platform: "tuya"
    name: "Water Temperature"
    sensor_datapoint: 10
    unit_of_measurement: '°C'
  - platform: "tuya"
    name: "Element Runtime"
    sensor_datapoint: 107
    unit_of_measurement: 'hrs'
  - platform: "tuya"
    name: "Error Code"
    sensor_datapoint: 20
  - platform: "tuya"
    name: "Element Status"
    sensor_datapoint: 13
  - platform: uptime
    name: "Uptime Sensor"
    id: uptime_sensor
    entity_category: diagnostic
    internal: true
  - platform: wifi_signal
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"
    disabled_by_default: true
  - platform: copy
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    id: wifi_percent
    filters:
      - lambda: |-
          return (x > -50) ? 100 : 
                 (x < -100) ? 0 : 
                 2 * (x + 100);
    unit_of_measurement: "Signal %"
    entity_category: "diagnostic"
    device_class: ""

number:
  - platform: "tuya"
    name: "Block 1 00:00-06:00"
    number_datapoint: 103
    min_value: 30
    max_value: 65
    step: 1
    unit_of_measurement: '°C'
  - platform: "tuya"
    name: "Block 2 06:00-12:00"
    number_datapoint: 104
    min_value: 30
    max_value: 65
    step: 1
    unit_of_measurement: '°C'
  - platform: "tuya"
    name: "Block 3 12:00-18:00"
    number_datapoint: 105
    min_value: 30
    max_value: 65
    step: 1
    unit_of_measurement: '°C'
  - platform: "tuya"
    name: "Block 4 18:00-00:00"
    number_datapoint: 106
    min_value: 30
    max_value: 65
    step: 1
    unit_of_measurement: '°C'
  - platform: "tuya"
    name: "PTC Element Temp"
    number_datapoint: 102
    min_value: 30
    max_value: 85
    step: 1
    unit_of_measurement: '°C'

switch:
  - platform: "tuya"
    name: "Power"
    switch_datapoint: 1
  - platform: "tuya"
    name: "PTC Element Power"
    switch_datapoint: 101

select:
  - platform: "tuya"
    name: "Mode"
    enum_datapoint: 2
    optimistic: false
    options:
      0: "Holiday"
      1: "Normal"

button:
  - platform: restart
    id: restart_device
    name: "Restart"
    entity_category: diagnostic
  - platform: factory_reset
    id: device_reset
    name: "Reset to Factory Default Settings"
    entity_category: diagnostic
  - platform: restart
    name: "Restart"
    id: device_restart
    entity_category: diagnostic
  - platform: safe_mode
    name: "Safe Mode"
    id: device_safe_mode
    internal: false
    entity_category: config

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "IP Address"
      id: wifi_ip_address
      icon: mdi:ip-network
      entity_category: diagnostic
    ssid:
      name: "Connected SSID"
      id: wifi_connected_ssid
      icon: mdi:wifi-strength-2
      entity_category: diagnostic
    mac_address:
      name: "Mac Address"
      id: wifi_mac_address
      icon: mdi:network-pos
      entity_category: diagnostic
  - platform: template
    name: "Last Restart"
    id: device_last_restart
    icon: mdi:clock
    entity_category: diagnostic
  - platform: template
    name: "Uptime"
    id: device_uptime
    entity_category: diagnostic
    lambda: |-
      uint32_t seconds = (uint32_t)id(uptime_sensor).state;
      uint32_t days = seconds / 86400;
      seconds = seconds % 86400;
      uint32_t hours = seconds / 3600;
      seconds = seconds % 3600;
      uint32_t minutes = seconds / 60;
      seconds = seconds % 60;

      char buffer[32];
      if (days > 3650) {
        snprintf(buffer, sizeof(buffer), "Starting up");
      } else if (days > 0) {
        snprintf(buffer, sizeof(buffer), "%ud %uh %um %us", days, hours, minutes, seconds);
      } else if (hours > 0) {
        snprintf(buffer, sizeof(buffer), "%uh %um %us", hours, minutes, seconds);
      } else if (minutes > 0) {
        snprintf(buffer, sizeof(buffer), "%um %us", minutes, seconds);
      } else {
        snprintf(buffer, sizeof(buffer), "%us", seconds);
      }
      return std::string(buffer);
    icon: mdi:clock-start
  - platform: template
    name: "MQTT Broker IP"
    id: mqtt_broker_text
    entity_category: config
    icon: mdi:server-network
    lambda: |-
      return id(mqtt_broker_ip_global);
    on_value:
      - lambda: |-
          id(mqtt_broker_ip_global) = x;
  - platform: template
    name: "MQTT Username"
    id: mqtt_username_text
    entity_category: config
    icon: mdi:account
    lambda: |-
      return id(mqtt_username_global);
    on_value:
      - lambda: |-
          id(mqtt_username_global) = x;
  - platform: template
    name: "MQTT Password"
    id: mqtt_password_text
    entity_category: config
    icon: mdi:lock
    lambda: |-
      return id(mqtt_password_global);
    on_value:
      - lambda: |-
          id(mqtt_password_global) = x;

time:
  - platform: sntp
    id: sntp_time
    timezone: "${timezone}"
    update_interval: ${sntp_update_interval}
    servers: 
      - "${sntp_server_1}"
      - "${sntp_server_2}"
      - "${sntp_server_3}"
    on_time_sync:
      then:
        - if:
            condition:
              lambda: 'return id(device_last_restart).state == "";'
            then:
              - text_sensor.template.publish:
                  id: device_last_restart
                  state: !lambda 'return id(sntp_time).now().strftime("%a %d %b %Y - %I:%M:%S %p");'
