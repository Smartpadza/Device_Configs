substitutions:
  # Default name
  name: "smartpad-em-basic-switch"
  # Default friendly name   
  friendly_name: "SmartPad EM Basic"
  # Allows ESP device to be automatically linked to an 'Area' in Home Assistant. Typically used for areas such as 'Lounge Room', 'Kitchen' etc  
  room: ""
  # Description as appears in ESPHome & top of webserver page
  device_description: "smartpad esp32-c3 basic switch em"
  # Project Name
  project_name: "SmartPad.Energy Metering Basic Switch"
  # Projection version denotes the release version of the yaml file, allowing checking of deployed vs latest version
  project_version: "v1.0.3"
  # Restore the relay (GPO switch) upon reboot to state:
  relay_restore_mode: "RESTORE_DEFAULT_ON"
  # Set the update interval for sensors
  sensor_update_interval: 5s
  # Current Limit in Amps
  current_limit : "10"
  # Define a domain for this device to use. i.e. iot.home.lan (so device will appear as smartpad-em32-smart-plug.local in DNS/DHCP logs)
  dns_domain: ".local"
  # Set timezone of the smart plug. Useful if the plug is in a location different to the HA server. Can be entered in unix Country/Area format (i.e. "Africa/Johannesburg")
  timezone: "Africa/Johannesburg"
  # Set the duration between the sntp service polling ntp.org servers for an update
  sntp_update_interval: 6h
  # Network time servers for your region, enter from lowest to highest priority. To use local servers update as per zones or countries at: https://www.ntppool.org/zone/@
  sntp_server_1: "0.pool.ntp.org"
  sntp_server_2: "1.pool.ntp.org"
  sntp_server_3: "2.pool.ntp.org"  
  # Enables faster network connections, with last connected SSID being connected to and no full scan for SSID being undertaken
  wifi_fast_connect: "false"
  # Define logging level: NONE, ERROR, WARN, INFO, DEBUG (Default), VERBOSE, VERY_VERBOSE
  log_level: "WARN"
  # Hide the ENERGY sensor that shows kWh consumed, but with no time period associated with it. Resets when device restarted and reflashed.
  hide_energy_sensor: "false"
  # Enable or disable the use of IPv6 networking on the device
  ipv6_enable: "false"
  #Specify Web Server Versions
  web_server_version: "2"
  #Power plug icon selection. Change to reflect the type/country of power plug in use, this will update the power plug icon shown next to the switch
  power_plug_type: "power-socket-fr"  # Options: power-socket-au | power-socket-ch | power-socket-de | power-socket-eu | power-socket-fr | power-socket-it | power-socket-jp | power-socket-uk | power-socket-us |
  #Voltage Devider Starting Value
  voltage_reference : "15873.35944299"
  #current Resistor Starting Value
  current_reference: "251213.46469622"
  #Currnt Multiplier Starting Value
  power_reference: "596.0"
  #Currnt Multiplier Starting Value
  energy_reference: "3304.61127328"

########################## End of Substitutions #########################

#Board Configuration
esp32:
  board: esp32-c3-devkitm-1
  flash_size: 4MB
  variant: ESP32C3
  framework:
    type: esp-idf
#Core Configuration
esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  comment: "${device_description}"
  area: "${room}"  
  name_add_mac_suffix: true
  min_version: 2024.6.0
  project:
    name: "${project_name}"
    version: "${project_version}"

#Configuration to allow selection of Power restore Mode

  on_boot:
  - priority: 600
    then:
      - select.set_index:
          id: power_mode
          index: !lambda |-
                    return id(restore_mode);  // Index matches restore_mode (0, 1, 2)
      - lambda: |-
          int mode = id(restore_mode);
          switch(mode) {
            case 0:  // Always Off
              id(relay).turn_off();
              break;
            case 1:  // Always On
              id(relay).turn_on();
              break;
            case 2:  // Restore Previous State
              // No action needed; switch.restore_mode handles this
              break;
            default:
              id(relay).turn_off();  // Fallback to safe state
              break;
          }
          // Apply restored values to BL0942 sensor
          id(power_sensor).set_voltage_reference(id(voltage_reference_number).state);
          id(power_sensor).set_current_reference(id(current_reference_number).state);
          id(power_sensor).set_power_reference(id(power_reference_number).state);
          id(power_sensor).set_energy_reference(id(energy_reference_number).state);
          id(power_sensor).setup();

select:
  - platform: template
    name: "Power On State"
    id: "power_mode"
    optimistic: true
    icon: mdi:electric-switch
    initial_option: "Restore Previous State"  # Matches restore_mode: 2
    options:
      - "Always Off"       # index 0 → restore_mode 0
      - "Always On"        # index 1 → restore_mode 1
      - "Restore Previous State"  # index 2 → restore_mode 2
    on_value:
      then:
        - lambda: |-
            id(restore_mode) = i;  

dashboard_import:
  package_import_url: github://Smartpadza/Device_Configs/smartpad-em-basic-switch.yaml
  import_full_config: false # or true

globals:
  - id: restore_mode
    type: int
    restore_value: yes
    initial_value: "2"  # 0 = Always Off, 1 = Always On, 2 = Restore Previous State

  - id: total_energy
    type: float
    restore_value: yes
    initial_value: '0.0'

  - id: overload_count
    type: int
    restore_value: no
    initial_value: "0"

  # Add global variable for current_multiply
  - id: current_reference
    type: float
    restore_value: yes
    initial_value: ${current_reference}

#prevent rapid changes to a component from being quickly written to the flash and wearing it out
preferences:
  flash_write_interval: 5min

#Enable Home Assistant API
api:
#Enable OTA Updates
ota:
  - platform: esphome
#Specify Logging level
logger:
  level: ${log_level}
  baud_rate: 0
#Allow MDNS to be disabled
mdns:
  disabled: false
#Enable Web Server
web_server:
  port: 80
  version: ${web_server_version}

network:
  enable_ipv6: ${ipv6_enable}
#Wifi Configuration
wifi:
  # This spawns an AP with the device name and mac address with no password.
  ap: {}
  # Allow rapid re-connection to previously connect WiFi SSID, skipping scan of all SSID
  fast_connect: "${wifi_fast_connect}"
  # Define dns domain / suffix to add to hostname
  domain: "${dns_domain}"

#Enable Captive Portal Fallback
captive_portal:

#WiFi Configuration
#esp32_improv:
#  authorizer: relay_button
#  status_indicator: output_status_led

# UART Configuration for BL0942
uart:
  id: uart_bus
  tx_pin: GPIO21  # 
  rx_pin: GPIO20 # 
  baud_rate: 4800
  stop_bits: 1

#Device LED Configurations
light:
  platform: status_led
  id: status
  output: output_status_led
output:

  #relay Status LED (Red)
  - platform: gpio
    id: output_status_led
    pin:
      number: GPIO6
      inverted: true
  #Device Status LED (Blue)
  - platform: gpio
    id: gpio_output_relay_led
    pin:
      number: GPIO1
      inverted: true

# Relay & Status LED Linking
switch:
  - platform: gpio
    pin: GPIO4 
    id: relay
    name: "Switch"
    device_class: outlet
    restore_mode: ${relay_restore_mode}
    on_turn_on:
      - output.turn_on: gpio_output_relay_led  # Turn on the LED when the relay is active
    on_turn_off:
      - output.turn_off: gpio_output_relay_led  # Turn off the LED when the relay is inactive

#HLW8012 Power Monitoring Configuration and Calibration Configuration
number:
  - platform: template
    id: voltage_reference_number  # Updated ID to reflect BL0942 terminology
    name: "Voltage Reference"
    optimistic: true
    min_value: 1000
    max_value: 30000
    step: 0.001
    unit_of_measurement: counts/V
    initial_value: ${voltage_reference}
    restore_value: true
    entity_category: config
    disabled_by_default: true
    mode: box
    on_value:
      then:
        - lambda: |-
            id(power_sensor).set_voltage_reference(x);
            id(power_sensor).setup();

  - platform: template
    id: current_reference_number  # Updated ID to reflect BL0942 terminology
    name: "Current Reference"
    optimistic: true
    min_value: 10000
    max_value: 500000
    step: 0.001
    unit_of_measurement: counts/A
    initial_value: ${current_reference}
    restore_value: true
    entity_category: config
    disabled_by_default: true
    mode: box
    on_value:
      then:
        - lambda: |-
            id(power_sensor).set_current_reference(x);
            id(power_sensor).setup();

  - platform: template
    id: power_reference_number  # Added for BL0942
    name: "Power Reference"
    optimistic: true
    min_value: 100
    max_value: 1000
    step: 0.1
    unit_of_measurement: counts/W
    initial_value: ${power_reference}
    restore_value: true
    entity_category: config
    disabled_by_default: true
    mode: box
    on_value:
      then:
        - lambda: |-
            id(power_sensor).set_power_reference(x);
            id(power_sensor).setup();

  - platform: template
    id: energy_reference_number  # Added for BL0942
    name: "Energy Reference"
    optimistic: true
    min_value: 1000
    max_value: 10000
    step: 0.1
    unit_of_measurement: counts/kWh
    initial_value: ${energy_reference}
    restore_value: true
    entity_category: config
    disabled_by_default: true
    mode: box
    on_value:
      then:
        - lambda: |-
            id(power_sensor).set_energy_reference(x);
            id(power_sensor).setup();

#Sensor Configurations
sensor:
  - platform: bl0942
    id: power_sensor
    uart_id: uart_bus
    update_interval: ${sensor_update_interval}
    voltage_reference: ${voltage_reference}
    current_reference: ${current_reference}
    power_reference: ${power_reference}
    energy_reference: ${energy_reference}
    voltage:
      name: "Voltage"
      id: voltage_id
      icon: mdi:sine-wave
      filters:
        - throttle_average: ${sensor_update_interval}
    current:
      name: "Current"
      id: current_id
      filters:
        - throttle_average: ${sensor_update_interval}
      on_value_range:
        - above: ${current_limit}
          then:
            - delay: 5s
            - switch.turn_off: relay
            - lambda: 'id(overload_count) += 1;'
    power:
      name: "Power"
      id: power_id
      icon: mdi:power
      filters:
        - throttle_average: ${sensor_update_interval}
        - lambda: if (x < 3.0) return 0.0; else return x;  # Retain filter for no-load condition
    energy:
      name: "Energy"
      id: energy
      icon: mdi:lightning-bolt
      unit_of_measurement: kWh
      disabled_by_default: ${hide_energy_sensor}
      filters:
        - throttle_average: ${sensor_update_interval}
        - multiply: 0.001  # Convert Wh to kWh

  - platform: uptime
    name: "Uptime Sensor"
    id: uptime_sensor
    update_interval: 1h
    entity_category: diagnostic
    internal: true

  - platform: wifi_signal
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 1h
    entity_category: "diagnostic"
    disabled_by_default: true

  - platform: copy
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    id: wifi_percent
    filters:
      - lambda: |-
          return (x > -50) ? 100 : 
                 (x < -100) ? 0 : 
                 2 * (x + 100);
    unit_of_measurement: "Signal %"
    entity_category: "diagnostic"
    device_class: ""

# Added total energy persistence
  - platform: total_daily_energy
    name: "Total Energy"
    id: daily_energy_sum
    power_id: power_id
    filters:
      - multiply: 0.001
    unit_of_measurement: kWh
    icon: mdi:lightning-bolt-circle
    accuracy_decimals: 3

#Diagnostic Data Sensors    
text_sensor:
  - platform: wifi_info
    ip_address:
      name: "IP Address"
      id: wifi_ip_address
      icon: mdi:ip-network
      entity_category: diagnostic
    ssid:
      name: "Connected SSID"
      id: wifi_connected_ssid
      icon: mdi:wifi-strength-2
      entity_category: diagnostic
    mac_address:
      name: "Mac Address"
      id: wifi_mac_address
      icon: mdi:network-pos
      entity_category: diagnostic

  #  Creates a sensor showing when the device was last restarted
  - platform: template
    name: 'Last Restart'
    id: device_last_restart
    icon: mdi:clock
    entity_category: diagnostic
  #  Creates a sensor of the uptime of the device, in formatted days, hours, minutes and seconds
  - platform: template
    name: "Uptime"
    id: device_uptime
    entity_category: diagnostic
    lambda: |-
      int seconds = static_cast<int>(id(uptime_sensor).state);
      int days = seconds / 86400;
      seconds %= 86400;
      int hours = seconds / 3600;
      seconds %= 3600;
      int minutes = seconds / 60;
      seconds %= 60;

      if (days > 3650) {
        return {"Starting up"};
      } else if (days > 0) {
        return {str_sprintf("%dd %dh %dm %ds", days, hours, minutes, seconds)};
      } else if (hours > 0) {
        return {str_sprintf("%dh %dm %ds", hours, minutes, seconds)};
      } else if (minutes > 0) {
        return {str_sprintf("%dm %ds", minutes, seconds)};
      } else {
        return {str_sprintf("%ds", seconds)};
      }
    icon: mdi:clock-start

#Button Configurations
#Device Physical Button
binary_sensor:
  - platform: gpio
    pin: 
      number: GPIO5
      mode: INPUT_PULLUP
      inverted: true
    id: "relay_button"
    name: "Power Button"
    disabled_by_default: true
    filters:
      - delayed_on: 50ms
    on_multi_click:
      - timing:
          - ON for at most 1s
          - OFF for at least 0.2s
        then:
          - switch.toggle: relay
      - timing:
          - ON for at least 10s  # Long press for reset
        then:
          - button.press: device_Reset

#Factory Reset "Soft-Button"
button:
  - platform: factory_reset
    id: "device_Reset"
    name: "Reset to Factory Default Settings"
    entity_category: diagnostic
#Device Restart "Soft-Button"
  - platform: restart
    name: "Restart"
    id: device_restart
    entity_category: diagnostic
#Safe Mode "Soft-Button"
  - platform: safe_mode
    name: "Safe Mode"
    id: device_safe_mode
    internal: false
    entity_category: config


time:
  - platform: sntp
    id: sntp_time
  # Define the timezone of the device
    timezone: "${timezone}"
  # Change sync interval from default 5min to 6 hours (or as set in substitutions)
    update_interval: ${sntp_update_interval}
  # Set specific sntp servers to use
    servers: 
      - "${sntp_server_1}"
      - "${sntp_server_2}"
      - "${sntp_server_3}"    
  # Publish the time the device was last restarted
    on_time_sync:
      then:
        # Update last restart time, but only once.
        - if:
            condition:
              lambda: 'return id(device_last_restart).state == "";'
            then:
              - text_sensor.template.publish:
                  id: device_last_restart
                  state: !lambda 'return id(sntp_time).now().strftime("%a %d %b %Y - %I:%M:%S %p");'
